{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["import axios from 'axios';  \n\n// Ключ API для доступа к Pixabay\nconst API_KEY = '11539560-6ff438bd7cc613d70e4d35abc';  \n// Базовый URL для запросов к Pixabay API\nconst BASE_URL = 'https://pixabay.com/api/';  \n\n// Функция для получения изображений по заданному запросу\nexport function fetchImages(query) {  \n  // Параметры запроса\n  const params = {  \n    key: API_KEY,  \n    q: query,  \n    image_type: 'photo',  \n    orientation: 'horizontal',  \n    safesearch: true,  \n  };  \n\n  // Создание URL с параметрами\n  const url = `${BASE_URL}?${new URLSearchParams(params)}`;  \n\n  // Запрос к API с использованием axios\n  return axios  \n    .get(url)  \n    .then(response => response.data.hits)  // Возврат массива изображений\n    .catch(error => {  \n      console.error('Ошибка при получении данных из Pixabay API:', error);  // Логирование ошибки\n      throw error;  // Проброс ошибки\n    });  \n}\n\n\n// // Импортируем модуль axios для выполнения HTTP-запросов\n// import axios from 'axios';\n\n// // Константа API_KEY хранит ключ API для доступа к Pixabay\n// const API_KEY = '11539560-6ff438bd7cc613d70e4d35abc';\n// // Константа BASE_URL хранит базовый URL для запросов к Pixabay API\n// const BASE_URL = 'https://pixabay.com/api/';\n\n// // Функция fetchImages выполняет запрос к Pixabay API для получения изображений\n// export function fetchImages(query) {\n//   // Формируем URL с необходимыми параметрами для запроса\n//   const url = `${BASE_URL}?key=${API_KEY}&q=${query}&image_type=photo&orientation=horizontal&safesearch=true`;\n\n//   // Выполняем GET-запрос к API и обрабатываем ответ\n//   return axios\n//     .get(url)\n//     .then(response => response.data.hits) // Возвращаем полученные изображения\n//     .catch(error => {\n//       // Логируем ошибку при выполнении запроса и пробрасываем её дальше\n//       console.error('Error fetching data from Pixabay API:', error);\n//       throw error;\n//     });\n// }\n","import SimpleLightbox from 'simplelightbox';  \nimport 'simplelightbox/dist/simple-lightbox.min.css';  \n\n// Функция создает разметку галереи на основе массива изображений\nexport function renderGallery(images) {  \n  // Очищаем контейнер галереи\n  const gallery = document.querySelector('#gallery');  \n  gallery.innerHTML = '';  \n\n  // Создаем разметку для каждого изображения\n  const markup = images.map(createGalleryItem).join('');  \n  // Добавляем разметку в контейнер галереи\n  gallery.innerHTML = markup;  \n\n  // Инициализируем лайтбокс\n  initializeLightbox();  \n}  \n\n// Функция создает разметку для одного изображения\nfunction createGalleryItem({  \n  largeImageURL,  \n  webformatURL,  \n  tags,  \n  likes,  \n  views,  \n  comments,  \n  downloads,  \n}) {  \n  // Создаем разметку для одного изображения\n  return `  \n    <a href=\"${largeImageURL}\" class=\"gallery-item\">  \n      <img src=\"${webformatURL}\" alt=\"${tags}\" />  \n      <div class=\"image-info\">  \n        <p><strong>Likes</strong> ${likes}</p>  \n        <p><strong>Views</strong> ${views}</p>  \n        <p><strong>Comments</strong> ${comments}</p>  \n        <p><strong>Downloads</strong> ${downloads}</p>  \n      </div>  \n    </a>`;  \n}  \n\n// Функция инициализирует лайтбокс\nfunction initializeLightbox() {  \n  // Создаем экземпляр лайтбокса\n  const lightbox = new SimpleLightbox('.gallery a', {  \n    captionsData: 'alt',  \n    captionDelay: 250,  \n    captionPosition: 'bottom',  \n    overlayOpacity: 1,  \n    showCounter: false,  \n  });  \n\n  // Обновляем лайтбокс\n  lightbox.refresh();  \n}\n\n\n// import SimpleLightbox from 'simplelightbox';\n// import 'simplelightbox/dist/simple-lightbox.min.css';\n\n// export function renderGallery(images) {\n//   const gallery = document.querySelector('#gallery');\n//   gallery.innerHTML = '';\n//   const markup = images\n//     .map(\n//       ({\n//         largeImageURL,\n//         webformatURL,\n//         tags,\n//         likes,\n//         views,\n//         comments,\n//         downloads,\n//       }) => `\n//       <a href=\"${largeImageURL}\" class=\"gallery-item\">\n//         <img src=\"${webformatURL}\" alt=\"${tags}\" />\n//         <div class=\"image-info\">\n//           <p><strong>Likes</strong> ${likes}</p>\n//           <p><strong>Views</strong> ${views}</p>\n//           <p><strong>Comments</strong> ${comments}</p>\n//           <p><strong>Downloads</strong> ${downloads}</p>\n//         </div>\n//       </a>`\n//     )\n//     .join('');\n\n//   gallery.innerHTML = markup;\n\n//   const lightbox = new SimpleLightbox('.gallery a', {\n//     captionsData: 'alt',\n//     captionDelay: 250,\n//     captionPosition: 'bottom',\n//     overlayOpacity: 1,\n//     showCounter: false,\n//   });\n\n//   lightbox.refresh();\n// }","import { fetchImages } from './js/pixabay-api.js';  \nimport { renderGallery } from './js/render-functions.js';  \nimport iziToast from 'izitoast';  \nimport 'izitoast/dist/css/iziToast.min.css';  \n\n// Объект с ссылками на DOM-элементы  \nconst refs = {  \n  form: document.querySelector('#search-form'),  \n  input: document.querySelector('#search-input'),  \n  loader: document.querySelector('#loader'),  \n  gallery: document.querySelector('#gallery'),  \n};  \n\n \n// Функция для отображения загрузчика  \nfunction showLoader() {  \n  refs.loader.classList.remove('hidden');  \n}  \n\n// Функция для скрытия загрузчика  \nfunction hideLoader() {  \n  refs.loader.classList.add('hidden');  \n}  \n\n\n// Функция для показа ошибки  \nfunction showError(message) {  \n  iziToast.error({  \n    title: 'Error',  \n    message,  \n    position: 'topRight',  \n    timeout: 2000,  \n  });  \n}  \n\n// Функция для показа информационного сообщения  \nfunction showInfo(message) {  \n  iziToast.info({  \n    title: '',  \n    message,  \n    position: 'topRight',  \n    timeout: 3000,  \n  });  \n}  \n\n\n// Функция-обработчик события отправки формы  \nfunction handleFormSubmit(event) {  \n  event.preventDefault();  \n  const query = refs.input.value.trim();  \n\n  // Проверка на пустой запрос  \n  if (!query) {  \n    showError('Please enter a search term!');  \n    return;  \n  }  \n\n  // Получение изображений с отображением загрузчика  \n  fetchImagesWithLoader(query);\n  // Очистка поля ввода после отправки  \n  refs.input.value = '';  \n}  \n\n// Функция для получения изображений с отображением загрузчика  \nfunction fetchImagesWithLoader(query) {  \n  // Отображение загрузчика  \n  showLoader();  \n\n  // Получение изображений  \n  fetchImages(query)  \n    .then(images => {  \n      // Скрытие загрузчика  \n      hideLoader();  \n      // Обработка ответа  \n      handleImageFetchResponse(images);  \n    })  \n    .catch(error => {  \n      // Скрытие загрузчика  \n      hideLoader();  \n      // Показ ошибки  \n      showError('Something went wrong! Please try again later.');  \n      // Логирование ошибки  \n      console.error('Error fetching images:', error);  \n    });  \n}  \n\n// Функция-обработчик ответа  после получения изображений  \nfunction handleImageFetchResponse(images) {  \n  // Если изображений нет, то показываем информационное сообщение  \n  if (images.length === 0) {  \n    showInfo('Sorry, there are no images matching your search query. Please try again!');  \n  } else {  \n    // Иначе отображаем галерею  \n    renderGallery(images);  \n  }  \n}  \n\n\n// Добавление обработчика события отправки формы  \nrefs.form.addEventListener('submit', handleFormSubmit);\n\n\n// import { fetchImages } from './js/pixabay-api.js';\n// import { renderGallery } from './js/render-functions.js';\n// import iziToast from 'izitoast';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// const refs = {\n//   form: document.querySelector('#search-form'),\n//   input: document.querySelector('#search-input'),\n//   loader: document.querySelector('#loader'),\n//   gallery: document.querySelector('#gallery'),\n// };\n\n// function showLoader() {\n//   refs.loader.classList.remove('hidden');\n// }\n\n// function hideLoader() {\n//   refs.loader.classList.add('hidden');\n// }\n\n// refs.form.addEventListener('submit', event => {\n//   event.preventDefault();\n//   const query = refs.input.value.trim();\n\n//   if (!query) {\n//     iziToast.error({\n//       title: 'Error',\n//       message: 'Please enter a search term!',\n//       position: 'topRight',\n//       timeout: 2000,\n//     });\n//     return;\n//   }\n\n//   showLoader();\n\n//   fetchImages(query)\n//     .then(images => {\n//       hideLoader();\n\n//       if (images.length === 0) {\n//         iziToast.info({\n//           title: 'Oops!',\n//           message:\n//             'Sorry, there are no images matching your search query. Please try again!',\n//           position: 'topRight',\n//           timeout: 3000,\n//         });\n//       } else {\n//         renderGallery(images);\n//       }\n//     })\n//     .catch(error => {\n//       hideLoader();\n//       iziToast.error({\n//         title: 'Error',\n//         message: 'Something went wrong! Please try again later.',\n//         position: 'topRight',\n//         timeout: 3000,\n//       });\n//       console.error('Error fetching images:', error);\n//     });\n// });"],"names":["API_KEY","BASE_URL","fetchImages","query","params","url","axios","response","error","renderGallery","images","gallery","markup","createGalleryItem","initializeLightbox","largeImageURL","webformatURL","tags","likes","views","comments","downloads","SimpleLightbox","refs","showLoader","hideLoader","showError","message","iziToast","showInfo","handleFormSubmit","event","fetchImagesWithLoader","handleImageFetchResponse"],"mappings":"owBAGA,MAAMA,EAAU,qCAEVC,EAAW,2BAGV,SAASC,EAAYC,EAAO,CAEjC,MAAMC,EAAS,CACb,IAAKJ,EACL,EAAGG,EACH,WAAY,QACZ,YAAa,aACb,WAAY,EAChB,EAGQE,EAAM,GAAGJ,CAAQ,IAAI,IAAI,gBAAgBG,CAAM,CAAC,GAGtD,OAAOE,EACJ,IAAID,CAAG,EACP,KAAKE,GAAYA,EAAS,KAAK,IAAI,EACnC,MAAMC,GAAS,CACd,cAAQ,MAAM,8CAA+CA,CAAK,EAC5DA,CACZ,CAAK,CACL,CCzBO,SAASC,EAAcC,EAAQ,CAEpC,MAAMC,EAAU,SAAS,cAAc,UAAU,EACjDA,EAAQ,UAAY,GAGpB,MAAMC,EAASF,EAAO,IAAIG,CAAiB,EAAE,KAAK,EAAE,EAEpDF,EAAQ,UAAYC,EAGpBE,GACF,CAGA,SAASD,EAAkB,CACzB,cAAAE,EACA,aAAAC,EACA,KAAAC,EACA,MAAAC,EACA,MAAAC,EACA,SAAAC,EACA,UAAAC,CACF,EAAG,CAED,MAAO;AAAA,eACMN,CAAa;AAAA,kBACVC,CAAY,UAAUC,CAAI;AAAA;AAAA,oCAERC,CAAK;AAAA,oCACLC,CAAK;AAAA,uCACFC,CAAQ;AAAA,wCACPC,CAAS;AAAA;AAAA,SAGjD,CAGA,SAASP,GAAqB,CAEX,IAAIQ,EAAe,aAAc,CAChD,aAAc,MACd,aAAc,IACd,gBAAiB,SACjB,eAAgB,EAChB,YAAa,EACjB,CAAG,EAGQ,QAAO,CAClB,CChDA,MAAMC,EAAO,CACX,KAAM,SAAS,cAAc,cAAc,EAC3C,MAAO,SAAS,cAAc,eAAe,EAC7C,OAAQ,SAAS,cAAc,SAAS,EACxC,QAAS,SAAS,cAAc,UAAU,CAC5C,EAIA,SAASC,GAAa,CACpBD,EAAK,OAAO,UAAU,OAAO,QAAQ,CACvC,CAGA,SAASE,GAAa,CACpBF,EAAK,OAAO,UAAU,IAAI,QAAQ,CACpC,CAIA,SAASG,EAAUC,EAAS,CAC1BC,EAAS,MAAM,CACb,MAAO,QACP,QAAAD,EACA,SAAU,WACV,QAAS,GACb,CAAG,CACH,CAGA,SAASE,EAASF,EAAS,CACzBC,EAAS,KAAK,CACZ,MAAO,GACP,QAAAD,EACA,SAAU,WACV,QAAS,GACb,CAAG,CACH,CAIA,SAASG,EAAiBC,EAAO,CAC/BA,EAAM,eAAc,EACpB,MAAM5B,EAAQoB,EAAK,MAAM,MAAM,KAAI,EAGnC,GAAI,CAACpB,EAAO,CACVuB,EAAU,6BAA6B,EACvC,MACD,CAGDM,EAAsB7B,CAAK,EAE3BoB,EAAK,MAAM,MAAQ,EACrB,CAGA,SAASS,EAAsB7B,EAAO,CAEpCqB,IAGAtB,EAAYC,CAAK,EACd,KAAKO,GAAU,CAEde,IAEAQ,EAAyBvB,CAAM,CACrC,CAAK,EACA,MAAMF,GAAS,CAEdiB,IAEAC,EAAU,+CAA+C,EAEzD,QAAQ,MAAM,yBAA0BlB,CAAK,CACnD,CAAK,CACL,CAGA,SAASyB,EAAyBvB,EAAQ,CAEpCA,EAAO,SAAW,EACpBmB,EAAS,0EAA0E,EAGnFpB,EAAcC,CAAM,CAExB,CAIAa,EAAK,KAAK,iBAAiB,SAAUO,CAAgB"}